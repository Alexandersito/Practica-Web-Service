//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClienteWeb.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.WebService1Soap")]
    public interface WebService1Soap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Suma", ReplyAction="*")]
        double Suma(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Suma", ReplyAction="*")]
        System.Threading.Tasks.Task<double> SumaAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Resta", ReplyAction="*")]
        double Resta(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Resta", ReplyAction="*")]
        System.Threading.Tasks.Task<double> RestaAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Multiplicacion", ReplyAction="*")]
        double Multiplicacion(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Multiplicacion", ReplyAction="*")]
        System.Threading.Tasks.Task<double> MultiplicacionAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Division", ReplyAction="*")]
        double Division(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Division", ReplyAction="*")]
        System.Threading.Tasks.Task<double> DivisionAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Raiz", ReplyAction="*")]
        double Raiz(double i, double n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Raiz", ReplyAction="*")]
        System.Threading.Tasks.Task<double> RaizAsync(double i, double n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Potencia", ReplyAction="*")]
        double Potencia(double b, double e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Potencia", ReplyAction="*")]
        System.Threading.Tasks.Task<double> PotenciaAsync(double b, double e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Inversa", ReplyAction="*")]
        double Inversa(double n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Inversa", ReplyAction="*")]
        System.Threading.Tasks.Task<double> InversaAsync(double n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Factorial", ReplyAction="*")]
        double Factorial(double n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Factorial", ReplyAction="*")]
        System.Threading.Tasks.Task<double> FactorialAsync(double n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Logaritmo", ReplyAction="*")]
        double Logaritmo(double n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Logaritmo", ReplyAction="*")]
        System.Threading.Tasks.Task<double> LogaritmoAsync(double n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ValorAbsoluto", ReplyAction="*")]
        double ValorAbsoluto(double n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ValorAbsoluto", ReplyAction="*")]
        System.Threading.Tasks.Task<double> ValorAbsolutoAsync(double n);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebService1SoapChannel : ClienteWeb.ServiceReference1.WebService1Soap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebService1SoapClient : System.ServiceModel.ClientBase<ClienteWeb.ServiceReference1.WebService1Soap>, ClienteWeb.ServiceReference1.WebService1Soap {
        
        public WebService1SoapClient() {
        }
        
        public WebService1SoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Suma(double n1, double n2) {
            return base.Channel.Suma(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> SumaAsync(double n1, double n2) {
            return base.Channel.SumaAsync(n1, n2);
        }
        
        public double Resta(double n1, double n2) {
            return base.Channel.Resta(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> RestaAsync(double n1, double n2) {
            return base.Channel.RestaAsync(n1, n2);
        }
        
        public double Multiplicacion(double n1, double n2) {
            return base.Channel.Multiplicacion(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> MultiplicacionAsync(double n1, double n2) {
            return base.Channel.MultiplicacionAsync(n1, n2);
        }
        
        public double Division(double n1, double n2) {
            return base.Channel.Division(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> DivisionAsync(double n1, double n2) {
            return base.Channel.DivisionAsync(n1, n2);
        }
        
        public double Raiz(double i, double n) {
            return base.Channel.Raiz(i, n);
        }
        
        public System.Threading.Tasks.Task<double> RaizAsync(double i, double n) {
            return base.Channel.RaizAsync(i, n);
        }
        
        public double Potencia(double b, double e) {
            return base.Channel.Potencia(b, e);
        }
        
        public System.Threading.Tasks.Task<double> PotenciaAsync(double b, double e) {
            return base.Channel.PotenciaAsync(b, e);
        }
        
        public double Inversa(double n) {
            return base.Channel.Inversa(n);
        }
        
        public System.Threading.Tasks.Task<double> InversaAsync(double n) {
            return base.Channel.InversaAsync(n);
        }
        
        public double Factorial(double n) {
            return base.Channel.Factorial(n);
        }
        
        public System.Threading.Tasks.Task<double> FactorialAsync(double n) {
            return base.Channel.FactorialAsync(n);
        }
        
        public double Logaritmo(double n) {
            return base.Channel.Logaritmo(n);
        }
        
        public System.Threading.Tasks.Task<double> LogaritmoAsync(double n) {
            return base.Channel.LogaritmoAsync(n);
        }
        
        public double ValorAbsoluto(double n) {
            return base.Channel.ValorAbsoluto(n);
        }
        
        public System.Threading.Tasks.Task<double> ValorAbsolutoAsync(double n) {
            return base.Channel.ValorAbsolutoAsync(n);
        }
    }
}
